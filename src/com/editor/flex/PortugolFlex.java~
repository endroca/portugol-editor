/* The following code was generated by JFlex 1.5.1 */

package com.editor.flex;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
import jsyntaxpane.lexers.DefaultJFlexLexer;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>C:/Users/SIMONETO-2/Documents/NetBeansProjects/portugol-projeto/src/com/editor/flex/Portugol_v2.flex</tt>
 */
public final class PortugolFlex extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ML_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\70\1\71\1\1\22\0\1\3\1\0\1\64"+
    "\4\0\1\67\1\47\1\50\1\5\1\53\1\62\1\22\1\20\1\4"+
    "\1\10\1\16\2\15\4\15\2\11\1\63\1\0\1\57\1\61\1\60"+
    "\1\66\1\0\4\14\1\21\1\17\2\6\1\56\1\65\1\6\1\12"+
    "\3\6\1\55\7\6\1\13\2\6\1\51\1\23\1\52\1\0\1\7"+
    "\1\0\1\24\1\14\1\36\1\42\1\40\1\37\1\26\1\46\1\31"+
    "\1\65\1\6\1\25\1\33\1\35\1\27\1\43\1\45\1\30\1\41"+
    "\1\32\1\44\1\34\1\6\1\13\1\6\1\54\12\0\1\70\u1fa2\0"+
    "\1\70\1\70\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\2\3\1\4\2\5\1\1\13\4"+
    "\1\6\3\4\1\7\1\10\1\11\1\12\1\4\2\3"+
    "\1\13\2\1\1\14\1\0\1\15\3\5\1\0\4\5"+
    "\1\0\4\4\1\6\20\4\1\16\1\4\1\6\2\4"+
    "\1\3\1\0\1\17\1\0\1\17\2\0\2\14\2\0"+
    "\4\5\1\0\10\4\1\3\1\20\14\4\1\3\2\4"+
    "\1\21\2\0\2\5\3\4\1\22\20\4\1\16\2\5"+
    "\10\4\1\5\3\4\1\23\5\4\2\5\2\4\1\24"+
    "\11\4\2\5\10\4\1\6\2\5\6\4\2\5\2\4"+
    "\2\5\2\4\1\0\1\5\1\4\1\0\1\5\1\25"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\164\0\350\0\u0122\0\164"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\164\0\164\0\164\0\164\0\u05aa"+
    "\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\164"+
    "\0\u077a\0\u07b4\0\164\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u015c\0\u0e80\0\u0eba\0\u015c\0\u06cc\0\164\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\164\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u0c02\0\u015c\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1512\0\u1634\0\u166e\0\164\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u015c\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u015c\0\u1bde\0\u1c18"+
    "\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\u015c\0\u1e22\0\u1e5c\0\u1e96\0\u015c\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u015c\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a"+
    "\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a"+
    "\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea"+
    "\0\u015c\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80"+
    "\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50"+
    "\0\u2d8a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\3\11\2\13\1\11\1\14\1\11\1\10"+
    "\1\3\1\15\1\16\1\11\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\3\11\1\34\1\35\1\36\1\37\1\10\1\11"+
    "\1\40\1\11\1\41\2\42\1\10\1\42\1\43\1\11"+
    "\1\3\1\44\1\0\1\6\1\3\1\0\1\5\61\3"+
    "\1\45\2\3\1\44\76\0\1\5\72\0\1\6\65\0"+
    "\1\6\4\0\1\46\1\47\72\0\12\11\1\0\1\11"+
    "\2\0\23\11\5\0\3\11\6\0\1\11\1\50\13\0"+
    "\1\51\1\52\1\53\1\54\1\0\1\55\1\56\1\57"+
    "\1\60\1\61\3\0\1\53\11\0\1\57\1\61\41\0"+
    "\2\13\1\53\2\0\2\13\1\57\1\60\1\61\3\0"+
    "\1\53\11\0\1\57\1\61\41\0\2\60\3\0\2\60"+
    "\61\0\12\11\1\0\1\11\2\0\1\11\1\62\4\11"+
    "\1\63\14\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\3\11\1\64\10\11\1\65"+
    "\6\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\20\11\1\66\2\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\1\67\13\11\1\70\6\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\11\11\1\71"+
    "\11\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\1\72\22\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\3\11"+
    "\1\73\17\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\1\74\13\11\1\75\6\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\1\76\22\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\1\77\2\11"+
    "\1\100\17\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\1\101\4\11\1\102\12\11"+
    "\1\103\2\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\11\11\1\104\3\11\1\105"+
    "\5\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\6\11\1\106\5\11\1\107\6\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\5\11\1\110\6\11\1\111\6\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\1\112\2\11\1\113\17\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\23\11"+
    "\5\0\2\11\1\114\6\0\1\11\1\50\25\0\1\10"+
    "\35\0\2\10\71\0\1\10\10\0\2\115\1\116\20\115"+
    "\1\117\40\115\1\120\5\115\2\121\1\116\20\121\1\122"+
    "\43\121\1\116\2\121\2\115\1\116\20\115\1\117\40\115"+
    "\1\116\5\115\1\46\1\123\1\124\67\46\5\125\1\126"+
    "\64\125\10\0\1\51\1\52\1\53\2\0\1\55\1\56"+
    "\1\57\1\60\1\61\3\0\1\53\11\0\1\57\1\61"+
    "\41\0\2\52\3\0\2\52\1\57\1\60\1\61\15\0"+
    "\1\57\1\61\41\0\1\127\1\130\2\0\4\130\1\0"+
    "\1\130\2\0\1\130\11\0\3\130\1\0\1\130\37\0"+
    "\1\131\1\52\1\53\2\0\2\131\1\57\1\60\1\61"+
    "\3\0\1\53\11\0\1\57\1\61\41\0\1\55\1\52"+
    "\1\53\2\0\2\55\1\57\1\60\1\61\3\0\1\53"+
    "\11\0\1\57\1\61\116\0\1\53\14\0\2\60\3\0"+
    "\2\60\1\57\1\0\1\61\15\0\1\57\1\61\41\0"+
    "\2\132\3\0\2\132\3\0\1\133\30\0\1\133\24\0"+
    "\12\11\1\0\1\11\2\0\2\11\1\134\20\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\14\11\1\111\6\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\2\11\1\135"+
    "\20\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\5\11\1\136\15\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\6\11\1\137\14\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\5\11\1\140\15\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\1\141\22\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\5\11\1\142"+
    "\1\143\14\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\11\11\1\114\11\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\16\11\1\144\4\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\4\11\1\145"+
    "\16\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\4\11\1\146\1\11\1\147\14\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\3\11\1\114\17\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\4\11"+
    "\1\150\10\11\1\151\5\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\15\11\1\114"+
    "\5\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\1\11\1\152\10\11\1\136\10\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\7\11\1\153\13\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\11\11"+
    "\1\154\11\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\6\11\1\155\12\11\1\156"+
    "\1\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\12\11\1\157\4\11\1\160\3\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\4\11\1\161\16\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\11\11"+
    "\1\162\11\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\10\11\1\114\12\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\4\11\1\163\10\11\1\164\5\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\6\11\1\114\14\11\5\0\3\11\6\0\1\11\1\50"+
    "\3\0\2\115\1\116\67\115\64\0\1\165\7\0\1\116"+
    "\20\0\1\166\43\0\1\116\2\0\2\121\1\116\67\121"+
    "\2\0\1\124\67\0\5\125\1\167\64\125\4\0\1\124"+
    "\1\126\74\0\1\127\1\130\1\53\1\0\4\130\1\0"+
    "\1\130\2\0\1\130\1\53\10\0\3\130\1\0\1\130"+
    "\37\0\2\170\1\53\1\0\4\170\1\0\1\170\2\0"+
    "\1\170\1\53\10\0\3\170\1\0\1\170\37\0\1\171"+
    "\1\52\1\53\2\0\2\171\1\57\1\60\1\61\3\0"+
    "\1\53\11\0\1\57\1\61\41\0\2\132\3\0\2\132"+
    "\1\57\17\0\1\57\42\0\2\132\3\0\2\132\61\0"+
    "\12\11\1\0\1\11\2\0\3\11\1\172\17\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\5\11\1\173\15\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\1\111\22\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\4\11\1\174\16\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\23\11"+
    "\5\0\1\114\2\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\1\11\1\175\21\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\12\11\1\176\10\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\14\11\1\177\6\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\16\11\1\200\4\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\3\11"+
    "\1\201\17\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\1\202\22\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\3\11\1\111\17\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\15\11\1\203\5\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\1\204\12\11\1\205\1\206\1\207\1\11"+
    "\1\210\3\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\12\11\1\155\10\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\1\151\22\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\20\11\1\211\2\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\3\11\1\212\1\213\16\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\14\11\1\214\6\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\5\11\1\215\15\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\1\216\22\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\15\11\1\151"+
    "\5\11\5\0\3\11\6\0\1\11\1\50\5\0\1\116"+
    "\67\0\4\125\1\124\1\167\64\125\10\0\2\217\1\53"+
    "\1\0\4\217\1\0\1\217\2\0\1\217\1\53\10\0"+
    "\3\217\1\0\1\217\37\0\1\220\1\52\1\53\2\0"+
    "\2\220\1\57\1\60\1\61\3\0\1\53\11\0\1\57"+
    "\1\61\37\0\12\11\1\0\1\11\2\0\4\11\1\221"+
    "\16\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\12\11\1\222\10\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\3\11\1\223\17\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\5\11\1\224\15\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\4\11\1\225\1\226\15\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\1\227\22\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\4\11\1\111\16\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\12\11\1\230\10\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\3\11\1\231"+
    "\17\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\1\11\1\232\21\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\20\11\1\103\2\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\11\11\1\233\3\11"+
    "\1\234\5\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\14\11\1\235\6\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\1\236\22\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\1\237\22\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\1\11\1\240\21\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\14\11\1\241"+
    "\6\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\4\11\1\63\16\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\11\11\1\242\11\11\5\0\3\11\6\0\1\11\1\50"+
    "\13\0\2\243\1\53\1\0\4\243\1\0\1\243\2\0"+
    "\1\243\1\53\10\0\3\243\1\0\1\243\37\0\1\244"+
    "\1\52\1\53\2\0\2\244\1\57\1\60\1\61\3\0"+
    "\1\53\11\0\1\57\1\61\37\0\12\11\1\0\1\11"+
    "\2\0\5\11\1\245\15\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\3\11\1\175"+
    "\17\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\12\11\1\246\10\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\3\11\1\247\17\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\4\11\1\250\16\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\4\11\1\222\16\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\16\11"+
    "\1\251\4\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\6\11\1\252\14\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\2\11\1\253\20\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\21\11\1\254"+
    "\1\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\12\11\1\255\10\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\4\11\1\256\16\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\11\11\1\257\11\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\22\11\1\163\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\10\11\1\260"+
    "\12\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\2\11\1\175\20\11\5\0\3\11"+
    "\6\0\1\11\1\50\13\0\2\261\1\53\1\0\4\261"+
    "\1\0\1\261\2\0\1\261\1\53\10\0\3\261\1\0"+
    "\1\261\37\0\1\262\1\52\1\53\2\0\2\262\1\57"+
    "\1\60\1\61\3\0\1\53\11\0\1\57\1\61\37\0"+
    "\12\11\1\0\1\11\2\0\6\11\1\263\14\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\1\164\22\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\3\11\1\264\17\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\14\11\1\265\6\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\14\11"+
    "\1\266\6\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\3\11\1\267\17\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\20\11\1\270\2\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\3\11\1\271"+
    "\17\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\1\235\22\11\5\0\3\11\6\0"+
    "\1\11\1\50\11\0\12\11\1\0\1\11\2\0\6\11"+
    "\1\272\14\11\5\0\3\11\6\0\1\11\1\50\11\0"+
    "\12\11\1\0\1\11\2\0\1\273\22\11\5\0\3\11"+
    "\6\0\1\11\1\50\13\0\2\274\1\53\1\0\4\274"+
    "\1\0\1\274\2\0\1\274\1\53\10\0\3\274\1\0"+
    "\1\274\37\0\1\275\1\52\1\53\2\0\2\275\1\57"+
    "\1\60\1\61\3\0\1\53\11\0\1\57\1\61\37\0"+
    "\12\11\1\0\1\11\2\0\7\11\1\276\13\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\7\11\1\277\13\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\5\11\1\300"+
    "\15\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\4\11\1\175\16\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\4\11\1\301\16\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\1\302\22\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\1\11\1\303\21\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\3\11\1\216"+
    "\17\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\1\11\1\111\21\11\5\0\3\11"+
    "\6\0\1\11\1\50\13\0\2\304\1\53\1\0\4\304"+
    "\1\0\1\304\2\0\1\304\1\53\10\0\3\304\1\0"+
    "\1\304\37\0\1\305\1\52\1\53\2\0\2\305\1\57"+
    "\1\60\1\61\3\0\1\53\11\0\1\57\1\61\37\0"+
    "\12\11\1\0\1\11\2\0\3\11\1\145\17\11\5\0"+
    "\3\11\6\0\1\11\1\50\11\0\12\11\1\0\1\11"+
    "\2\0\17\11\1\136\3\11\5\0\3\11\6\0\1\11"+
    "\1\50\11\0\12\11\1\0\1\11\2\0\4\11\1\203"+
    "\16\11\5\0\3\11\6\0\1\11\1\50\11\0\12\11"+
    "\1\0\1\11\2\0\5\11\1\306\15\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\11\11\1\307\11\11\5\0\3\11\6\0\1\11\1\50"+
    "\11\0\12\11\1\0\1\11\2\0\22\11\1\256\5\0"+
    "\3\11\6\0\1\11\1\50\13\0\2\310\1\53\1\0"+
    "\4\310\1\0\1\310\2\0\1\310\1\53\10\0\3\310"+
    "\1\0\1\310\37\0\1\311\1\52\1\53\2\0\2\311"+
    "\1\57\1\60\1\61\3\0\1\53\11\0\1\57\1\61"+
    "\37\0\12\11\1\0\1\11\2\0\6\11\1\312\14\11"+
    "\5\0\3\11\6\0\1\11\1\50\11\0\12\11\1\0"+
    "\1\11\2\0\6\11\1\313\14\11\5\0\3\11\6\0"+
    "\1\11\1\50\13\0\2\314\1\53\1\0\4\314\1\0"+
    "\1\314\2\0\1\314\1\53\10\0\3\314\1\0\1\314"+
    "\37\0\1\315\1\52\1\53\2\0\2\315\1\57\1\60"+
    "\1\61\3\0\1\53\11\0\1\57\1\61\37\0\12\11"+
    "\1\0\1\11\2\0\7\11\1\316\13\11\5\0\3\11"+
    "\6\0\1\11\1\50\11\0\12\11\1\0\1\11\2\0"+
    "\3\11\1\235\17\11\5\0\3\11\6\0\1\11\1\50"+
    "\13\0\2\317\1\53\1\0\4\317\1\0\1\317\2\0"+
    "\1\317\1\53\10\0\3\317\1\0\1\317\37\0\1\320"+
    "\1\52\1\53\2\0\2\320\1\57\1\60\1\61\3\0"+
    "\1\53\11\0\1\57\1\61\37\0\12\11\1\0\1\11"+
    "\2\0\3\11\1\321\17\11\5\0\3\11\6\0\1\11"+
    "\1\50\13\0\2\322\1\53\1\0\4\322\1\0\1\322"+
    "\2\0\1\322\1\53\10\0\3\322\1\0\1\322\37\0"+
    "\1\323\1\52\1\53\2\0\2\323\1\57\1\60\1\61"+
    "\3\0\1\53\11\0\1\57\1\61\41\0\2\324\1\53"+
    "\1\0\4\324\1\0\1\324\2\0\1\324\1\53\10\0"+
    "\3\324\1\0\1\324\37\0\1\325\1\52\1\53\2\0"+
    "\2\325\1\57\1\60\1\61\3\0\1\53\11\0\1\57"+
    "\1\61\41\0\2\326\1\53\1\0\4\326\1\0\1\326"+
    "\2\0\1\326\1\53\10\0\3\326\1\0\1\326\37\0"+
    "\1\327\1\52\1\53\2\0\2\327\1\57\1\60\1\61"+
    "\3\0\1\53\11\0\1\57\1\61\41\0\2\330\1\53"+
    "\1\0\4\330\1\0\1\330\2\0\1\330\1\53\10\0"+
    "\3\330\1\0\1\330\37\0\1\331\1\52\1\53\2\0"+
    "\2\331\1\57\1\60\1\61\3\0\1\53\11\0\1\57"+
    "\1\61\41\0\2\332\1\53\1\0\4\332\1\0\1\332"+
    "\2\0\1\332\1\53\10\0\3\332\1\0\1\332\37\0"+
    "\1\333\1\52\1\53\2\0\2\333\1\57\1\60\1\61"+
    "\3\0\1\53\11\0\1\57\1\61\41\0\2\334\1\53"+
    "\1\0\4\334\1\0\1\334\2\0\1\334\1\53\10\0"+
    "\3\334\1\0\1\334\37\0\1\335\1\52\1\53\2\0"+
    "\2\335\1\57\1\60\1\61\3\0\1\53\11\0\1\57"+
    "\1\61\43\0\1\53\12\0\1\53\54\0\1\336\1\52"+
    "\1\53\2\0\2\336\1\57\1\60\1\61\3\0\1\53"+
    "\11\0\1\57\1\61\41\0\1\337\1\52\1\53\2\0"+
    "\2\337\1\57\1\60\1\61\3\0\1\53\11\0\1\57"+
    "\1\61\41\0\1\340\1\52\1\53\2\0\2\340\1\57"+
    "\1\60\1\61\3\0\1\53\11\0\1\57\1\61\41\0"+
    "\1\341\1\52\1\53\2\0\2\341\1\57\1\60\1\61"+
    "\3\0\1\53\11\0\1\57\1\61\41\0\2\52\1\53"+
    "\2\0\2\52\1\57\1\60\1\61\3\0\1\53\11\0"+
    "\1\57\1\61\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\23\1\4\11"+
    "\7\1\1\0\1\11\2\1\1\11\1\0\4\1\1\0"+
    "\33\1\1\0\1\11\1\0\1\1\2\0\1\1\1\11"+
    "\2\0\4\1\1\0\31\1\1\11\2\0\124\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public PortugolFlex() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;
    private static final byte WORD      = 4;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PortugolFlex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PortugolFlex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return token(TokenType.ERROR);
          }
        case 22: break;
        case 2: 
          { 
          }
        case 23: break;
        case 3: 
          { return token(TokenType.OPERATOR);
          }
        case 24: break;
        case 4: 
          { return token(TokenType.IDENTIFIER);
          }
        case 25: break;
        case 5: 
          { return token(TokenType.NUMBER);
          }
        case 26: break;
        case 6: 
          { return token(TokenType.KEYWORD2);
          }
        case 27: break;
        case 7: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 28: break;
        case 8: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 29: break;
        case 9: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 30: break;
        case 10: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 31: break;
        case 11: 
          { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 32: break;
        case 12: 
          { return token(TokenType.COMMENT);
          }
        case 33: break;
        case 13: 
          { return token(TokenType.TYPE2);
          }
        case 34: break;
        case 14: 
          { return token(TokenType.KEYWORD2,  WORD);
          }
        case 35: break;
        case 15: 
          { return token(TokenType.STRING);
          }
        case 36: break;
        case 16: 
          { return token(TokenType.KEYWORD);
          }
        case 37: break;
        case 17: 
          { yybegin(ML_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 3;
          }
        case 38: break;
        case 18: 
          { return token(TokenType.TYPE);
          }
        case 39: break;
        case 19: 
          { return token(TokenType.KEYWORD2, -WORD);
          }
        case 40: break;
        case 20: 
          { return token(TokenType.KEYWORD, WORD);
          }
        case 41: break;
        case 21: 
          { return token(TokenType.KEYWORD, -WORD);
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
