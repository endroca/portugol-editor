
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 26 15:47:26 BRT 2014
//----------------------------------------------------

package com.compilador.portugol;

import static com.forms.Editor.util;
import java_cup.runtime.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 26 15:47:26 BRT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\007\000\002\002" +
    "\002\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\003\000\002\007\005\000\002" +
    "\007\014\000\002\010\005\000\002\010\003\000\002\011" +
    "\004\000\002\011\002\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\030\003\000\002\030\006\000\002\013\005\000\002\013" +
    "\010\000\002\014\005\000\002\014\007\000\002\015\005" +
    "\000\002\016\003\000\002\043\002\000\002\021\010\000" +
    "\002\022\003\000\002\044\002\000\002\045\002\000\002" +
    "\046\002\000\002\023\017\000\002\042\004\000\002\042" +
    "\002\000\002\017\006\000\002\017\006\000\002\020\006" +
    "\000\002\047\002\000\002\024\010\000\002\025\004\000" +
    "\002\025\002\000\002\050\002\000\002\026\006\000\002" +
    "\027\004\000\002\027\002\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\006\000\002\036\003" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\006\000\002\037\003\000\002\040\005\000\002" +
    "\040\003\000\002\041\005\000\002\041\003\000\002\041" +
    "\006\000\002\034\005\000\002\034\005\000\002\034\010" +
    "\000\002\034\006\000\002\034\006\000\002\034\006\000" +
    "\002\034\006\000\002\034\006\000\002\034\005\000\002" +
    "\034\006\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\002\uffff\004\006\001\002\000\006\005" +
    "\013\010\ufff9\001\002\000\006\005\ufffe\010\ufffe\001\002" +
    "\000\006\071\011\072\012\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\006\005\ufffd\010\ufffd" +
    "\001\002\000\006\005\ufffc\010\ufffc\001\002\000\006\010" +
    "\ufffb\071\267\001\002\000\004\010\015\001\002\000\030" +
    "\022\ufff1\026\ufff1\027\ufff1\033\ufff1\037\ufff1\040\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\071\ufff1\001\002\000\030" +
    "\022\034\026\040\027\024\033\037\037\031\040\044\063" +
    "\021\064\030\065\042\066\020\071\026\001\002\000\046" +
    "\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\071\uffef\001\002\000" +
    "\004\002\000\001\002\000\004\015\264\001\002\000\046" +
    "\022\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\071\uffec\001\002\000" +
    "\046\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\071\ufff0\001\002" +
    "\000\004\071\246\001\002\000\046\022\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\071\ufff2\001\002\000\006\014\240\017\237" +
    "\001\002\000\046\022\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\063\uffde\064\uffde\065\uffde\066\uffde\071" +
    "\uffde\001\002\000\004\015\231\001\002\000\046\022\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\071\uffe8\001\002\000\032\022" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\033\ufff1\037\ufff1" +
    "\040\ufff1\063\ufff1\064\ufff1\065\ufff1\071\ufff1\001\002\000" +
    "\046\022\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\071\uffea\001\002" +
    "\000\040\013\051\015\146\041\047\042\057\043\061\044" +
    "\046\045\060\046\053\047\064\062\150\071\056\072\054" +
    "\073\063\074\052\075\062\001\002\000\046\022\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\071\uffee\001\002\000\046\022\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\063\uffed" +
    "\064\uffed\065\uffed\066\uffed\071\uffed\001\002\000\036\013" +
    "\051\015\050\041\047\042\057\043\061\044\046\045\060" +
    "\046\053\047\064\071\056\072\054\073\063\074\052\075" +
    "\062\001\002\000\040\013\051\015\146\041\047\042\057" +
    "\043\061\044\046\045\060\046\053\047\064\062\150\071" +
    "\056\072\054\073\063\074\052\075\062\001\002\000\046" +
    "\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\071\uffe9\001\002\000" +
    "\004\015\134\001\002\000\046\022\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\071\uffeb\001\002\000\004\015\045\001\002\000" +
    "\036\013\051\015\050\041\047\042\057\043\061\044\046" +
    "\045\060\046\053\047\064\071\056\072\054\073\063\074" +
    "\052\075\062\001\002\000\004\015\131\001\002\000\004" +
    "\015\124\001\002\000\036\013\051\015\050\041\047\042" +
    "\057\043\061\044\046\045\060\046\053\047\064\071\056" +
    "\072\054\073\063\074\052\075\062\001\002\000\076\011" +
    "\uffad\012\uffad\016\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\053\uffad\054\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\070\uffad\071\uffad\001\002\000\076\011\uffb2" +
    "\012\uffb2\016\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\053\uffb2\054\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\070\uffb2\071\uffb2\001\002\000\004\015\117\001" +
    "\002\000\076\011\uffaf\012\uffaf\016\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf\001\002" +
    "\000\010\011\071\012\067\016\116\001\002\000\100\011" +
    "\uffb0\012\uffb0\016\uffb0\017\102\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\053\uffb0" +
    "\054\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\070\uffb0\071\uffb0\001\002\000\004" +
    "\015\077\001\002\000\004\015\074\001\002\000\004\015" +
    "\065\001\002\000\076\011\uffae\012\uffae\016\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\053\uffae\054\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\070\uffae\071\uffae" +
    "\001\002\000\076\011\uffb3\012\uffb3\016\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3\001" +
    "\002\000\076\011\uffb1\012\uffb1\016\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\053\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\071\uffb1\001\002" +
    "\000\036\013\051\015\050\041\047\042\057\043\061\044" +
    "\046\045\060\046\053\047\064\071\056\072\054\073\063" +
    "\074\052\075\062\001\002\000\010\011\071\012\067\016" +
    "\070\001\002\000\036\013\051\015\050\041\047\042\057" +
    "\043\061\044\046\045\060\046\053\047\064\071\056\072" +
    "\054\073\063\074\052\075\062\001\002\000\076\011\uffb9" +
    "\012\uffb9\016\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\053\uffb9\054\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\070\uffb9\071\uffb9\001\002\000\036\013\051\015" +
    "\050\041\047\042\057\043\061\044\046\045\060\046\053" +
    "\047\064\071\056\072\054\073\063\074\052\075\062\001" +
    "\002\000\076\011\uffbd\012\uffbd\016\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\053\uffbd\054\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd\001\002" +
    "\000\076\011\uffbc\012\uffbc\016\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\053" +
    "\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\001\002\000" +
    "\036\013\051\015\050\041\047\042\057\043\061\044\046" +
    "\045\060\046\053\047\064\071\056\072\054\073\063\074" +
    "\052\075\062\001\002\000\010\011\071\012\067\016\076" +
    "\001\002\000\076\011\uffb7\012\uffb7\016\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\071\uffb7\001" +
    "\002\000\036\013\051\015\050\041\047\042\057\043\061" +
    "\044\046\045\060\046\053\047\064\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\010\011\071\012\067" +
    "\016\101\001\002\000\076\011\uffba\012\uffba\016\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\053\uffba\054\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\063\uffba\064\uffba\065\uffba\066\uffba\070\uffba\071" +
    "\uffba\001\002\000\010\015\105\071\103\073\106\001\002" +
    "\000\012\011\uffa8\012\uffa8\016\uffa8\020\uffa8\001\002\000" +
    "\010\011\112\012\110\020\115\001\002\000\010\015\105" +
    "\071\103\073\106\001\002\000\012\011\uffa9\012\uffa9\016" +
    "\uffa9\020\uffa9\001\002\000\010\011\112\012\110\016\111" +
    "\001\002\000\010\015\105\071\103\073\106\001\002\000" +
    "\012\011\uffaa\012\uffaa\016\uffaa\020\uffaa\001\002\000\010" +
    "\015\105\071\103\073\106\001\002\000\012\011\uffac\012" +
    "\uffac\016\uffac\020\uffac\001\002\000\012\011\uffab\012\uffab" +
    "\016\uffab\020\uffab\001\002\000\076\011\uffb4\012\uffb4\016" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\053\uffb4\054\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\070" +
    "\uffb4\071\uffb4\001\002\000\046\022\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\071\uffe7\001\002\000\036\013\051\015\050\041" +
    "\047\042\057\043\061\044\046\045\060\046\053\047\064" +
    "\071\056\072\054\073\063\074\052\075\062\001\002\000" +
    "\010\011\071\012\067\016\121\001\002\000\076\011\uffb6" +
    "\012\uffb6\016\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\053\uffb6\054\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\070\uffb6\071\uffb6\001\002\000\010\011\071\012" +
    "\067\016\123\001\002\000\076\011\uffb5\012\uffb5\016\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\070\uffb5" +
    "\071\uffb5\001\002\000\036\013\051\015\050\041\047\042" +
    "\057\043\061\044\046\045\060\046\053\047\064\071\056" +
    "\072\054\073\063\074\052\075\062\001\002\000\010\011" +
    "\071\012\067\070\126\001\002\000\036\013\051\015\050" +
    "\041\047\042\057\043\061\044\046\045\060\046\053\047" +
    "\064\071\056\072\054\073\063\074\052\075\062\001\002" +
    "\000\010\011\071\012\067\016\130\001\002\000\076\011" +
    "\uffbb\012\uffbb\016\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\053\uffbb\054\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\070\uffbb\071\uffbb\001\002\000\036\013\051" +
    "\015\050\041\047\042\057\043\061\044\046\045\060\046" +
    "\053\047\064\071\056\072\054\073\063\074\052\075\062" +
    "\001\002\000\010\011\071\012\067\016\133\001\002\000" +
    "\076\011\uffb8\012\uffb8\016\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\053\uffb8" +
    "\054\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\001\002\000\004" +
    "\071\135\001\002\000\010\016\uffbf\017\142\070\uffbf\001" +
    "\002\000\006\016\140\070\137\001\002\000\004\071\135" +
    "\001\002\000\046\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\071" +
    "\uffd5\001\002\000\006\016\uffc0\070\uffc0\001\002\000\010" +
    "\015\105\071\103\073\106\001\002\000\010\011\112\012" +
    "\110\020\144\001\002\000\006\016\uffbe\070\uffbe\001\002" +
    "\000\010\030\201\056\173\061\172\001\002\000\040\013" +
    "\051\015\146\041\047\042\057\043\061\044\046\045\060" +
    "\046\053\047\064\062\150\071\056\072\054\073\063\074" +
    "\052\075\062\001\002\000\024\011\071\012\067\016\uffc3" +
    "\023\uffc3\030\uffc3\053\uffc3\054\uffc3\056\uffc3\061\uffc3\001" +
    "\002\000\004\015\166\001\002\000\020\016\uffc8\023\uffc8" +
    "\030\uffc8\053\152\054\153\056\uffc8\061\uffc8\001\002\000" +
    "\040\013\051\015\154\041\047\042\057\043\061\044\046" +
    "\045\060\046\053\047\064\062\156\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\040\013\051\015\154" +
    "\041\047\042\057\043\061\044\046\045\060\046\053\047" +
    "\064\062\156\071\056\072\054\073\063\074\052\075\062" +
    "\001\002\000\040\013\051\015\154\041\047\042\057\043" +
    "\061\044\046\045\060\046\053\047\064\062\156\071\056" +
    "\072\054\073\063\074\052\075\062\001\002\000\020\016" +
    "\uffc6\023\uffc6\030\uffc6\053\uffc6\054\uffc6\056\uffc6\061\uffc6" +
    "\001\002\000\004\015\157\001\002\000\040\013\051\015" +
    "\154\041\047\042\057\043\061\044\046\045\060\046\053" +
    "\047\064\062\156\071\056\072\054\073\063\074\052\075" +
    "\062\001\002\000\010\016\161\053\152\054\153\001\002" +
    "\000\020\016\uffc4\023\uffc4\030\uffc4\053\uffc4\054\uffc4\056" +
    "\uffc4\061\uffc4\001\002\000\010\016\164\053\152\054\153" +
    "\001\002\000\020\011\071\012\067\016\123\053\uffc3\054" +
    "\uffc3\056\uffc3\061\uffc3\001\002\000\020\016\uffc5\023\uffc5" +
    "\030\uffc5\053\uffc5\054\uffc5\056\uffc5\061\uffc5\001\002\000" +
    "\020\016\uffc7\023\uffc7\030\uffc7\053\uffc7\054\uffc7\056\uffc7" +
    "\061\uffc7\001\002\000\040\013\051\015\146\041\047\042" +
    "\057\043\061\044\046\045\060\046\053\047\064\062\150" +
    "\071\056\072\054\073\063\074\052\075\062\001\002\000" +
    "\010\016\171\056\173\061\172\001\002\000\014\016\161" +
    "\053\152\054\153\056\uffc8\061\uffc8\001\002\000\014\016" +
    "\uffc9\023\uffc9\030\uffc9\056\uffc9\061\uffc9\001\002\000\040" +
    "\013\051\015\146\041\047\042\057\043\061\044\046\045" +
    "\060\046\053\047\064\062\150\071\056\072\054\073\063" +
    "\074\052\075\062\001\002\000\040\013\051\015\146\041" +
    "\047\042\057\043\061\044\046\045\060\046\053\047\064" +
    "\062\150\071\056\072\054\073\063\074\052\075\062\001" +
    "\002\000\014\016\uffcc\023\uffcc\030\uffcc\056\uffcc\061\uffcc" +
    "\001\002\000\014\016\uffcb\023\uffcb\030\uffcb\056\uffcb\061" +
    "\uffcb\001\002\000\010\016\200\056\173\061\172\001\002" +
    "\000\014\016\164\053\152\054\153\056\uffc8\061\uffc8\001" +
    "\002\000\014\016\uffca\023\uffca\030\uffca\056\uffca\061\uffca" +
    "\001\002\000\030\022\uffe0\026\uffe0\027\uffe0\031\uffe0\033" +
    "\uffe0\037\uffe0\040\uffe0\063\uffe0\064\uffe0\065\uffe0\071\uffe0" +
    "\001\002\000\030\022\ufff1\026\ufff1\027\ufff1\031\ufff1\033" +
    "\ufff1\037\ufff1\040\ufff1\063\ufff1\064\ufff1\065\ufff1\071\ufff1" +
    "\001\002\000\030\022\034\026\040\027\024\031\204\033" +
    "\037\037\031\040\044\063\021\064\030\065\042\071\026" +
    "\001\002\000\046\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\071" +
    "\uffdf\001\002\000\014\011\071\012\067\034\uffd4\035\uffd4" +
    "\036\uffd4\001\002\000\010\034\uffd1\035\uffd1\036\uffd1\001" +
    "\002\000\010\034\213\035\210\036\uffcd\001\002\000\030" +
    "\022\ufff1\026\ufff1\027\ufff1\033\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\071\ufff1\001\002\000\004" +
    "\036\217\001\002\000\010\034\uffd2\035\uffd2\036\uffd2\001" +
    "\002\000\036\013\051\015\050\041\047\042\057\043\061" +
    "\044\046\045\060\046\053\047\064\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\040\011\071\012\067" +
    "\022\uffd0\026\uffd0\027\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\063\uffd0\064\uffd0\065\uffd0\071\uffd0" +
    "\001\002\000\034\022\ufff1\026\ufff1\027\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\071\ufff1\001\002\000\034\022\034\026\040\027" +
    "\024\033\037\034\uffcf\035\uffcf\036\uffcf\037\031\040\044" +
    "\063\021\064\030\065\042\071\026\001\002\000\046\022" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\071\uffd3\001\002\000\030" +
    "\022\034\026\040\027\024\033\037\036\uffce\037\031\040" +
    "\044\063\021\064\030\065\042\071\026\001\002\000\010" +
    "\023\222\056\173\061\172\001\002\000\032\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\033\uffe2\037\uffe2\040\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\071\uffe2\001\002\000\032\022" +
    "\034\024\224\025\225\026\040\027\024\033\037\037\031" +
    "\040\044\063\021\064\030\065\042\071\026\001\002\000" +
    "\030\022\uffe1\025\uffe1\026\uffe1\027\uffe1\033\uffe1\037\uffe1" +
    "\040\uffe1\063\uffe1\064\uffe1\065\uffe1\071\uffe1\001\002\000" +
    "\046\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\071\uffe4\001\002" +
    "\000\030\022\ufff1\025\ufff1\026\ufff1\027\ufff1\033\ufff1\037" +
    "\ufff1\040\ufff1\063\ufff1\064\ufff1\065\ufff1\071\ufff1\001\002" +
    "\000\030\022\034\025\230\026\040\027\024\033\037\037" +
    "\031\040\044\063\021\064\030\065\042\071\026\001\002" +
    "\000\046\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\071\uffe3\001" +
    "\002\000\036\013\051\015\050\041\047\042\057\043\061" +
    "\044\046\045\060\046\053\047\064\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\012\011\071\012\067" +
    "\016\uffc1\070\uffc1\001\002\000\006\016\235\070\234\001" +
    "\002\000\036\013\051\015\050\041\047\042\057\043\061" +
    "\044\046\045\060\046\053\047\064\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\046\022\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\071\uffd6\001\002\000\006\016\uffc2\070" +
    "\uffc2\001\002\000\010\015\105\071\103\073\106\001\002" +
    "\000\036\013\051\015\050\041\047\042\057\043\061\044" +
    "\046\045\060\046\053\047\064\071\056\072\054\073\063" +
    "\074\052\075\062\001\002\000\052\011\071\012\067\022" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\071\uffe6\001\002\000\010" +
    "\011\112\012\110\020\243\001\002\000\004\014\244\001" +
    "\002\000\036\013\051\015\050\041\047\042\057\043\061" +
    "\044\046\045\060\046\053\047\064\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\052\011\071\012\067" +
    "\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\071\uffe5\001\002\000" +
    "\004\055\247\001\002\000\036\013\051\015\050\041\047" +
    "\042\057\043\061\044\046\045\060\046\053\047\064\071" +
    "\056\072\054\073\063\074\052\075\062\001\002\000\010" +
    "\011\071\012\067\057\uffdd\001\002\000\004\057\252\001" +
    "\002\000\036\013\051\015\050\041\047\042\057\043\061" +
    "\044\046\045\060\046\053\047\064\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\012\011\071\012\067" +
    "\030\uffdc\060\uffdc\001\002\000\006\030\uffd8\060\255\001" +
    "\002\000\036\013\051\015\050\041\047\042\057\043\061" +
    "\044\046\045\060\046\053\047\064\071\056\072\054\073" +
    "\063\074\052\075\062\001\002\000\004\030\257\001\002" +
    "\000\030\022\uffdb\026\uffdb\027\uffdb\032\uffdb\033\uffdb\037" +
    "\uffdb\040\uffdb\063\uffdb\064\uffdb\065\uffdb\071\uffdb\001\002" +
    "\000\030\022\ufff1\026\ufff1\027\ufff1\032\ufff1\033\ufff1\037" +
    "\ufff1\040\ufff1\063\ufff1\064\ufff1\065\ufff1\071\ufff1\001\002" +
    "\000\030\022\034\026\040\027\024\032\262\033\037\037" +
    "\031\040\044\063\021\064\030\065\042\071\026\001\002" +
    "\000\046\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\063\uffda\064\uffda\065\uffda\066\uffda\071\uffda\001" +
    "\002\000\010\011\071\012\067\030\uffd9\001\002\000\036" +
    "\013\051\015\050\041\047\042\057\043\061\044\046\045" +
    "\060\046\053\047\064\071\056\072\054\073\063\074\052" +
    "\075\062\001\002\000\006\016\266\070\234\001\002\000" +
    "\046\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\071\uffd7\001\002" +
    "\000\006\067\ufff3\070\ufff3\001\002\000\006\010\ufffa\071" +
    "\267\001\002\000\006\010\ufff7\071\ufff7\001\002\000\006" +
    "\067\274\070\273\001\002\000\004\071\267\001\002\000" +
    "\006\006\275\007\276\001\002\000\006\010\ufff6\071\ufff6" +
    "\001\002\000\004\017\277\001\002\000\004\073\300\001" +
    "\002\000\004\021\301\001\002\000\004\073\302\001\002" +
    "\000\004\020\303\001\002\000\004\055\304\001\002\000" +
    "\004\006\305\001\002\000\006\010\ufff5\071\ufff5\001\002" +
    "\000\006\067\ufff4\070\ufff4\001\002\000\006\010\ufff8\071" +
    "\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\010\002\006\003\003\004\004\001\001\000" +
    "\004\005\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\267\007\270\010\271\001\001" +
    "\000\002\001\001\000\004\011\015\001\001\000\030\012" +
    "\024\013\016\014\034\015\031\017\035\020\021\021\042" +
    "\022\032\023\026\024\040\030\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\222\001\001\000\002\001\001\000" +
    "\010\034\146\036\220\037\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\204\001\001\000\010\034" +
    "\146\036\144\037\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\065\001\001\000\002\001\001\000\004\034" +
    "\072\001\001\000\002\001\001\000\004\034\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\113\001\001\000\002\001\001\000\004\035\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\124\001\001\000\002\001\001\000\004" +
    "\034\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\162\036\175" +
    "\037\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\146\037\164\001\001\000\006" +
    "\034\146\037\154\001\001\000\006\034\162\037\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\146" +
    "\037\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\146\036\166\037\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\146\036\174\037\150\001\001\000\010\034\146\036" +
    "\173\037\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\201\001\001\000\004\011\202\001\001\000\030" +
    "\012\024\013\016\014\034\015\031\017\035\020\021\021" +
    "\042\022\032\023\026\024\040\030\022\001\001\000\002" +
    "\001\001\000\004\047\205\001\001\000\004\025\206\001" +
    "\001\000\006\026\211\027\210\001\001\000\004\011\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\213\001\001\000\004\050\214\001\001\000\004\011\215" +
    "\001\001\000\030\012\024\013\016\014\034\015\031\017" +
    "\035\020\021\021\042\022\032\023\026\024\040\030\022" +
    "\001\001\000\002\001\001\000\030\012\024\013\016\014" +
    "\034\015\031\017\035\020\021\021\042\022\032\023\026" +
    "\024\040\030\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\012\024\013\016\014\034\015\031\016\225" +
    "\017\035\020\021\021\042\022\032\023\026\024\040\030" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\226\001\001\000\030\012\024\013\016\014\034\015" +
    "\031\017\035\020\021\021\042\022\032\023\026\024\040" +
    "\030\022\001\001\000\002\001\001\000\006\034\231\040" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\231\040\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\241\001\001\000\004\034\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\247\001\001\000\004\044\250\001\001\000" +
    "\002\001\001\000\004\034\252\001\001\000\004\045\253" +
    "\001\001\000\004\042\255\001\001\000\004\034\262\001" +
    "\001\000\002\001\001\000\004\046\257\001\001\000\004" +
    "\011\260\001\001\000\030\012\024\013\016\014\034\015" +
    "\031\017\035\020\021\021\042\022\032\023\026\024\040" +
    "\030\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\231\040\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\306\010\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	 util = new Compilador();

    }


    public void syntax_error(Symbol s){
    	if(s.value != null){
	        report_error("Erro de syntax: Linha "+(s.left+1)+" Coluna "+(s.right+1)+". Trecho desconhecido: "+s.value,null);
	        JOptionPane.showMessageDialog(null,"Erro de syntax: Linha "+(s.left+1)+" Coluna "+(s.right+1)+". Trecho desconhecido: "+s.value,"Erro de syntax",JOptionPane.WARNING_MESSAGE);
	    }else{
	        report_error("Erro de syntax: Linha "+(s.left+1)+" Coluna "+(s.right+1),null);
	        JOptionPane.showMessageDialog(null,"Erro de syntax: Linha "+(s.left+1)+" Coluna "+(s.right+1),"Erro de syntax",JOptionPane.WARNING_MESSAGE);
	    }
        util.setErro();
        this.done_parsing();
    }
    public void syntax_error(int left,int right,String mensagem){
		report_error(mensagem + " " + "Linha "+(left+1)+" Coluna "+(right),null);
		JOptionPane.showMessageDialog(null,mensagem + " " + "Linha "+(left+1)+" Coluna "+(right+1),"Erro de syntax",JOptionPane.WARNING_MESSAGE);

        util.setErro();
        this.done_parsing();
    }
    public void report_fatal_error(String message, Object info){
    	this.done_parsing();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // _operacoes_indice_vetor ::= ID 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			          			String[] tmp = util.getVariavel(n);
								if(tmp[1] != null) {
									if("int".equals(tmp[1])){
										RESULT = n;
									}else{
										parser.syntax_error(nleft,nright,util.Erros("VARIAVEL_ERRO1",n));
									}
								}else{
									parser.syntax_error(nleft,nright,util.Erros("VARIAVEL_VETOR_ERRO4",n));	
								}
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes_indice_vetor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _operacoes_indice_vetor ::= NUMERO_INT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes_indice_vetor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _operacoes_indice_vetor ::= ABRIR_PARENTESE _operacoes_indice_vetor FECHAR_PARENTESE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes_indice_vetor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _operacoes_indice_vetor ::= _operacoes_indice_vetor OPERADOR_SOMA _operacoes_indice_vetor 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1+" + "+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes_indice_vetor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // _operacoes_indice_vetor ::= _operacoes_indice_vetor OPERADOR _operacoes_indice_vetor 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1+" "+util.getOperador(op)+" "+e2;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes_indice_vetor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // _operacoes ::= VALOR_LOGICO 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					util.setBooleanTMP(true);
					RESULT = util.getValorLogico(l);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // _operacoes ::= CHAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					util.setCharTMP(true);
					RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // _operacoes ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					util.setStringTMP(true);
					RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // _operacoes ::= ID 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(util.checkVariavelExiste(n)) {
						String[] tmp = util.getVariavel(n);
						util.setTipoIdTMP(tmp[1]);
						RESULT = n;
					}else{
						parser.syntax_error(nleft,nright,util.Erros("VARIAVEL_ERRO1",n));	
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // _operacoes ::= PI 
            {
              String RESULT =null;
		
					RESULT = ""+Math.PI;
					util.setNumerofloatTMP(true); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _operacoes ::= NUMERO_FLOAT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = n;
					util.setNumerofloatTMP(true); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _operacoes ::= NUMERO_INT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = n;
					util.setNumeroIntTMP(true); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _operacoes ::= ID ABRIR_COLCHETE _operacoes_indice_vetor FECHAR_COLCHETE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					String[] tmp = util.getVariavelVetor(n);
					if(tmp[0] != null){
						util.setTipoIdTMP(tmp[1]);
						RESULT = n+"["+i+" - ("+tmp[2]+")]";
					}else{
						parser.syntax_error(nleft,nright,util.Erros("VARIAVEL_VETOR_ERRO1",n));	
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _operacoes ::= ABRIR_PARENTESE _operacoes FECHAR_PARENTESE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _operacoes ::= RAIZ ABRIR_PARENTESE _operacoes FECHAR_PARENTESE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "Math.sqrt("+n+")";
					util.setOperadorTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _operacoes ::= TANGENTE ABRIR_PARENTESE _operacoes FECHAR_PARENTESE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "Math.tan("+n+"*"+(Math.PI)/180+")";
					util.setOperadorTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _operacoes ::= COSSENO ABRIR_PARENTESE _operacoes FECHAR_PARENTESE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "Math.cos("+n+"*"+(Math.PI)/180+")";
					util.setOperadorTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _operacoes ::= SENO ABRIR_PARENTESE _operacoes FECHAR_PARENTESE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "Math.sin("+n+"*"+(Math.PI)/180+")";
					util.setOperadorTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _operacoes ::= MODULO ABRIR_PARENTESE _operacoes FECHAR_PARENTESE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "Math.abs("+n+")";
					util.setOperadorTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _operacoes ::= POTENCIA ABRIR_PARENTESE _operacoes SEPARADOR _operacoes FECHAR_PARENTESE 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "Math.pow("+n1+","+n2+")";
					util.setOperadorTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _operacoes ::= _operacoes OPERADOR_SOMA _operacoes 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = e1+" + "+e2; 
					util.setOperadorSomaTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _operacoes ::= _operacoes OPERADOR _operacoes 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = e1+" "+util.getOperador(op)+" "+e2; 
					util.setOperadorTMP(true);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operacoes",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _loop_virgula_id ::= ID ABRIR_COLCHETE _operacoes_indice_vetor FECHAR_COLCHETE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							String[] tmp = util.getVariavelVetor(n);
							if(tmp[0] != null){
								RESULT = n+"["+i+"]";
							}else{
								parser.syntax_error(nleft,nright,util.Erros("VARIAVEL_VETOR_ERRO1",n));	
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_loop_virgula_id",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // _loop_virgula_id ::= ID 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
							if(util.checkVariavelExiste(n)) {
								RESULT = n;
							}else{
								parser.syntax_error(nleft,nright,util.Erros("VARIAVEL_ERRO1",n));
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_loop_virgula_id",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _loop_virgula_id ::= _loop_virgula_id SEPARADOR _loop_virgula_id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + "," + e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_loop_virgula_id",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _loop_virgula ::= _operacoes 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = "("+e+")"; 
						String tmp = util.getTipoOperacao(); 
						if(tmp == null){
							parser.syntax_error(eleft,eright,util.Erros("OPERACAO_ERRO1",null));
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_loop_virgula",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _loop_virgula ::= _loop_virgula SEPARADOR _loop_virgula 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " + " + e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_loop_virgula",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _sub_condicional ::= _operacoes 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
							RESULT = e;
							util.setTiposOperacaoeTMP(util.getTipoOperacao());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_sub_condicional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _sub_condicional ::= NAO ABRIR_PARENTESE _sub_condicional FECHAR_PARENTESE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "!("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_sub_condicional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _sub_condicional ::= ABRIR_PARENTESE _sub_condicional FECHAR_PARENTESE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_sub_condicional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _sub_condicional ::= _sub_condicional CONDICIONAL_COMPARATIVA _sub_condicional 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							
							util.setCondicionalComparativaTMP(true);
							
							RESULT = s1+" "+util.getTipoCondiconal(c)+" "+s2;

							String tmp = util.setSubCondicional(RESULT);
							
							if("String".equals(tmp)){
								if("<>".equals(c)){
									RESULT = "!"+s1+".equals("+s2+")";
								}else{
									RESULT = s1+".equals("+s2+")";
								}
							}
							else if(tmp != null){
								switch(tmp){
									case "error1" : parser.syntax_error(s1left,s1right,util.Erros("CONDICIONAL_ERRO1",null)); break;
									default: parser.syntax_error(s1left,s1right,util.Erros("CONDICIONAL_ERRO2",tmp)); break;
								}
							}

						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_sub_condicional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _sub_condicional ::= _sub_condicional CONDICIONAL_NUMERICA _sub_condicional 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							RESULT = s1+" "+c+" "+s2;
							util.setCondicinalNumericaTMP(true);

							String tmp = util.setSubCondicional(RESULT);
							if(tmp != null){
								switch(tmp){
									case "error1" : parser.syntax_error(s1left,s1right,util.Erros("CONDICIONAL_ERRO1",null)); break;
									default: parser.syntax_error(s1left,s1right,util.Erros("CONDICIONAL_ERRO2",tmp)); break;
								}
							}

						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_sub_condicional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _condicional ::= _sub_condicional 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = e; 
						String tmp = util.setCondicional(RESULT);
						if(tmp != null){
							switch(tmp){
								case "error1" : parser.syntax_error(eleft,eright,util.Erros("CONDICIONAL_ERRO1",null)); break;
								default: parser.syntax_error(eleft,eright,util.Erros("CONDICIONAL_ERRO2",tmp)); break;
							}
						}

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_condicional",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _condicional ::= NAO ABRIR_PARENTESE _condicional FECHAR_PARENTESE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "!("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_condicional",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _condicional ::= ABRIR_PARENTESE _condicional FECHAR_PARENTESE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_condicional",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _condicional ::= _condicional OU _condicional 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = c1+" || "+c2;
						util.setCondicionalOuTMP(true);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_condicional",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _condicional ::= _condicional E _condicional 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = c1+" && "+c2;
						util.setCondicinalETMP(true);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_condicional",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // escolha_outrocaso ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha_outrocaso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // escolha_outrocaso ::= OUTROCASO programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha_outrocaso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // escolha_casos ::= CASO _operacoes NT$5 programa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha_casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$5 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
						String tmp_tipo_operacao = util.getTipoOperacao(); 
						util.setCode("\t\tcase("+b+"):");
						util.setCodeExec("\t\tcase("+b+"):",bleft); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // escolha_loop ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha_loop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // escolha_loop ::= escolha_loop escolha_casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha_loop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // escolha_funcao ::= ESCOLHA _operacoes NT$4 escolha_loop escolha_outrocaso FIMESCOLHA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						util.setCode("\t\t}");
						util.setCodeExec("\t\t}",fleft); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha_funcao",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
						String tmp_tipo_operacao = util.getTipoOperacao(); 
						util.setCode("\t\tswitch("+a+"){");
						util.setCodeExec("\t\tswitch("+a+"){",aleft); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // leia_funcao ::= LEIA ABRIR_PARENTESE _loop_virgula_id FECHAR_PARENTESE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							util.setLeia(true);

							for (String ids : e.split(",")) {
								String[] tmp;

								if(e.indexOf("[") > 0){
									tmp = util.getVariavelVetor(ids.replaceAll("\\[.*\\]",""));
									String indice = ids.substring(ids.indexOf("[")+1,ids.indexOf("]"));
									ids = ids.substring(0,ids.indexOf("]"))+"-("+tmp[2]+")]";
									switch(tmp[1]){
										case "int" : util.setCode("\t\t"+ids+" = ConsoleIO.nextInt();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeInt();",eleft);break;
										case "float" : util.setCode("\t\t"+ids+" = scanIn.nextFloat();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeFloat();",eleft);break;
										case "String" : util.setCode("\t\t"+ids+" = scanIn.next();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeString();",eleft);break;
										case "char" : util.setCode("\t\t"+ids+" = scanIn.nextChar();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeChar();",eleft);break;
									}
									util.setCodeExec("\t\ttable_variaveis.update(\""+tmp[0]+"[\"+"+indice+"+\"]\","+ids+");"); 
								}else{
									tmp = util.getVariavel(ids);
									switch(tmp[1]){
										case "int" : util.setCode("\t\t"+ids+" = ConsoleIO.nextInt();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeInt();",eleft);break;
										case "float" : util.setCode("\t\t"+ids+" = scanIn.nextFloat();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeFloat();",eleft);break;
										case "String" : util.setCode("\t\t"+ids+" = scanIn.next();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeString();",eleft);break;
										case "char" : util.setCode("\t\t"+ids+" = scanIn.nextChar();");util.setCodeExec("\t\t"+ids+" = ConsoleIO.writeChar();",eleft);break;
									}
									util.setCodeExec("\t\ttable_variaveis.update(\""+ids+"\","+ids+");");
								}
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leia_funcao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // escreva_funcao ::= ESCREVAL ABRIR_PARENTESE _loop_virgula FECHAR_PARENTESE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							util.setCode("\t\tSystem.out.println("+e+");");
							util.setCodeExec("\t\tConsoleIO.println("+e+");",eleft); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escreva_funcao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // escreva_funcao ::= ESCREVA ABRIR_PARENTESE _loop_virgula FECHAR_PARENTESE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							util.setCode("\t\tSystem.out.print("+e+");");
							util.setCodeExec("\t\tConsoleIO.print("+e+");",eleft); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escreva_funcao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _para_complementar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_para_complementar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _para_complementar ::= PASSO _operacoes 
            {
              String RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String tmp_tipo_operacao = util.getTipoOperacao();
						if(tmp_tipo_operacao != "int"){
							parser.syntax_error(n3left,n3right,util.Erros("TIPO_VARIAVEL_FOR",null));
						}else{
							RESULT = n3;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_para_complementar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // para_funcao_1 ::= PARA ID DE _operacoes NT$1 ATE _operacoes NT$2 _para_complementar FACA NT$3 programa FIMPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 util.setCode("\t\t}");util.setCodeExec("\t\t}",fleft);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para_funcao_1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

					String tmp[] = util.getVariavel(n);

					if(tmp[1] != null) {
						if("int".equals(tmp[1])){
							if(n3 != null){
								util.setCode("\t\tfor("+n+" = "+n1+";"+n+" <= "+n2+";"+n+"+="+n3+"){");
								util.setCodeExec("\t\tfor("+n+" = "+n1+";"+n+" <= "+n2+";"+n+"+="+n3+"){",pleft);
							}else{
								util.setCode("\t\tfor("+n+" = "+n1+";"+n+" <= "+n2+";"+n+"++){");
								util.setCodeExec("\t\tfor("+n+" = "+n1+";"+n+" <= "+n2+";"+n+"++){",pleft);
							}
							util.setCodeExec("\t\ttable_variaveis.update(\""+n+"\","+n+");");
						}else{
							parser.syntax_error(nleft,nright,util.Erros("TIPO_VARIAVEL_FOR",null));
						}
					}else{
						parser.syntax_error(nleft,nright,util.Erros("VARIAVEL_ERRO1",n));
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

						String tmp_tipo_operacao = util.getTipoOperacao();
						if(tmp_tipo_operacao != "int"){
							parser.syntax_error(n2left,n2right,util.Erros("TIPO_VARIAVEL_FOR",null));
						}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$1 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

						String tmp_tipo_operacao = util.getTipoOperacao();
						if(tmp_tipo_operacao != "int"){
							parser.syntax_error(n1left,n1right,util.Erros("TIPO_VARIAVEL_FOR",null));
						}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // para_funcao ::= para_funcao_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para_funcao",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // enquanto_funcao ::= ENQUANTO _condicional FACA NT$0 programa FIMENQUANTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 util.setCode("\t\t}");util.setCodeExec("\t\t}",pleft);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enquanto_funcao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							util.setCode("\t\twhile("+c+"){");
							util.setCodeExec("\t\twhile("+c+"){",cleft);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicional_2 ::= SENAO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						util.setCode("\t\t}else{");
						util.setCodeExec("\t\t}else{",pleft);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicional_1 ::= SE _condicional ENTAO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						util.setCode("\t\tif("+c+"){");
						util.setCodeExec("\t\tif("+c+"){",cleft);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condiciona_estrutura ::= condicional_1 programa condicional_2 programa FIMSE 
            {
              Object RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								util.setCode("\t\t}");
								util.setCodeExec("\t\t}",p3left);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciona_estrutura",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condiciona_estrutura ::= condicional_1 programa FIMSE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								util.setCode("\t\t}");
								util.setCodeExec("\t\t}",pleft);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciona_estrutura",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instanciacao_variaveis ::= ID ABRIR_COLCHETE _operacoes_indice_vetor FECHAR_COLCHETE ATRIBUIR _operacoes 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							  		String tmp = util.setVariavelVetor(x,e,n);
							  		switch(tmp){
							  			case "error1" : parser.syntax_error(xleft,xright,util.Erros("VARIAVEL_VETOR_ERRO1",x)); break;
							  			case "error2" : parser.syntax_error(xleft,xright,util.Erros("VARIAVEL_VETOR_ERRO2",x)); break;
							  			case "error3" : parser.syntax_error(xleft,xright,util.Erros("VARIAVEL_VETOR_ERRO3",x)); break;
							  			default: 
							  				util.setCode(tmp);
							  				util.setCodeExec(tmp,xleft);
							  			break;
							  		}
							  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instanciacao_variaveis",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instanciacao_variaveis ::= ID ATRIBUIR _operacoes 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							  		String tmp = util.setVariavelOperador(x,e);
							  		switch(tmp){
							  			case "error1" : parser.syntax_error(xleft,xright,util.Erros("VARIAVEL_ERRO1",x)); break;
							  			case "error2" : parser.syntax_error(xleft,xright,util.Erros("VARIAVEL_ERRO2",x)); break;
							  			default: 
							  				util.setCode(tmp);
							  				util.setCodeExec(tmp + "\ttable_variaveis.update(\""+x+"\","+x+");",xleft);
							  			break;
							  		}
							  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instanciacao_variaveis",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcoes_unitarias ::= ESPERAR ABRIR_PARENTESE _operacoes FECHAR_PARENTESE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							String tmp_tipo_operacao = util.getTipoOperacao();
							if(tmp_tipo_operacao != "int"){
								parser.syntax_error(nleft,nright,util.Erros("SOMENTE_INT",null));
							}else{
								util.setCode("\t\tThread.sleep("+n+");");
								util.setCodeExec("\t\tThread.sleep("+n+");",fleft);
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcoes_unitarias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcoes_unitarias ::= INTERROMPA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							util.setCode("\t\tbreak;");
							util.setCodeExec("\t\tbreak;",ileft);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcoes_unitarias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // corpo_programa ::= escolha_funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // corpo_programa ::= para_funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // corpo_programa ::= enquanto_funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // corpo_programa ::= leia_funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // corpo_programa ::= escreva_funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // corpo_programa ::= condiciona_estrutura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // corpo_programa ::= instanciacao_variaveis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // corpo_programa ::= funcoes_unitarias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // programa ::= programa corpo_programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_listagem ::= ID 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_listagem",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_listagem ::= var_listagem SEPARADOR var_listagem 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1+","+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_listagem",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_instanciacao ::= var_listagem ADD_ATTR_VAR TIPO_VARIAVEL_VETOR ABRIR_COLCHETE NUMERO_INT DOIS_PONTOS NUMERO_INT FECHAR_COLCHETE DE TIPO_VARIAVEL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							util.addVariavelVetor(e,x,n1,n2); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_instanciacao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_instanciacao ::= var_listagem ADD_ATTR_VAR TIPO_VARIAVEL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							util.addVariavel(e,x);
							util.setCodeVariables("\t" + util.getTipoVariavel(x) + " " +e+ ";");
							util.setCodeVariablesExec("\t" + util.getTipoVariavel(x) + " " +e+ ";");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_instanciacao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variaveis ::= var_instanciacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variaveis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variaveis ::= variaveis var_instanciacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variaveis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_estrutura ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_estrutura",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_estrutura ::= VAR variaveis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_estrutura",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_estrutura ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_estrutura",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // algoritmo_instanciacao ::= ALGORITMO STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
								util.setCode("public class "+e.substring(1, e.length()-1)+" {"); 
								util.setCodeName(e.substring(1, e.length()-1)); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo_instanciacao",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // algoritmo_instanciacao ::= ALGORITMO ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
								util.setCode("public class "+e+" {"); 
								util.setCodeName(e); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo_instanciacao",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // algoritmo_nome ::= algoritmo_instanciacao 
            {
              Object RESULT =null;
		 util.setInitClass(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo_nome",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // algoritmo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // algoritmo ::= algoritmo_nome var_estrutura INICIO programa FIMALGORITMO 
            {
              Object RESULT =null;
		 util.setEndClass(); util.codeComplete(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= algoritmo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

