/* The following code was generated by JFlex 1.5.1 */

////////////////////////////////////////////////////////////////////////
/*                                                                  ////
* ANALIZADOR DE PORTUGOL (TOKENS).   							    ////
* BY: ANDREW NETO                                                   ////
* 05/07/2014                                                        ////
*/                                                                  ////
////////////////////////////////////////////////////////////////////////

package com.compilador.portugol;

import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>C:/Users/SIMONETO-2/Documents/NetBeansProjects/portugol-projeto/src/com/compilador/portugol/Portugol.flex</tt>
 */
class PortugolFlex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\16\1\57\1\57\1\14\22\0\1\11\1\0\1\13"+
    "\4\0\1\15\1\46\1\47\1\20\1\10\1\51\1\4\1\5\1\17"+
    "\12\2\1\50\1\0\1\54\1\55\1\56\2\0\4\1\1\6\3\1"+
    "\1\53\6\1\1\52\12\1\1\44\1\12\1\45\1\0\1\3\1\0"+
    "\1\21\1\1\1\33\1\43\1\7\1\35\1\23\1\41\1\26\2\1"+
    "\1\22\1\30\1\32\1\24\1\40\1\36\1\25\1\34\1\27\1\37"+
    "\1\31\3\1\1\42\12\0\1\57\u1fa2\0\1\57\1\57\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\10\1\1\2\4\16\2\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\2\1\17\1\20\1\17"+
    "\2\5\1\21\2\2\2\0\1\22\2\0\1\23\1\24"+
    "\1\0\4\2\1\25\12\2\1\26\6\2\1\27\1\2"+
    "\1\30\1\31\1\17\1\5\4\2\1\0\2\24\2\0"+
    "\1\2\1\32\7\2\1\33\1\4\2\2\1\34\1\2"+
    "\1\35\2\2\1\36\1\37\7\2\1\40\1\4\5\2"+
    "\1\0\1\2\1\41\2\2\1\42\1\43\7\2\1\44"+
    "\3\2\1\45\6\2\1\46\1\2\1\47\14\2\1\50"+
    "\1\51\1\2\1\52\1\2\1\53\3\2\1\54\3\2"+
    "\1\55\3\2\1\56\2\2\1\57\1\2\1\60\7\2"+
    "\1\61\1\2\1\62\1\63\11\2\1\64\1\65\1\66"+
    "\10\2\1\67\1\70\4\2\1\71\1\72\1\2\1\73"+
    "\1\2\1\74\1\2\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\60"+
    "\0\60\0\u0150\0\u0180\0\u01b0\0\u01e0\0\60\0\u0210\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0450\0\u0480\0\60\0\60\0\60\0\60"+
    "\0\u04b0\0\60\0\u04e0\0\u0510\0\60\0\u0540\0\u0570\0\u05a0"+
    "\0\60\0\u05d0\0\u0600\0\u0150\0\u0630\0\60\0\u0660\0\u0690"+
    "\0\60\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\140\0\u0b40\0\60\0\140\0\60\0\u0b70\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\60\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\140\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\140\0\u0ea0\0\u0ed0\0\u0f00\0\140\0\u0f30\0\140"+
    "\0\u0f60\0\u0f90\0\140\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\140\0\140\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\140\0\u1290\0\u12c0\0\140"+
    "\0\140\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410"+
    "\0\140\0\u1440\0\u1470\0\u14a0\0\140\0\u14d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\140\0\u15f0\0\140\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\140\0\140\0\u1860\0\140\0\u1890\0\140"+
    "\0\u18c0\0\u18f0\0\u1920\0\140\0\u1950\0\u1980\0\u19b0\0\140"+
    "\0\u19e0\0\u1a10\0\u1a40\0\140\0\u1a70\0\u1aa0\0\140\0\u1ad0"+
    "\0\140\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20"+
    "\0\140\0\u1c50\0\140\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40"+
    "\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\140\0\140\0\140"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\140\0\140\0\u1fe0\0\u2010\0\u2040\0\u2070\0\140\0\140"+
    "\0\u20a0\0\140\0\u20d0\0\140\0\u2100\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\11\1\15"+
    "\1\16\1\17\1\20\1\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\3\1\33"+
    "\2\3\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\3\1\44\1\45\1\46\62\0\3\3\2\0"+
    "\2\3\11\0\23\3\6\0\2\3\6\0\1\4\2\0"+
    "\1\47\2\50\52\0\1\4\2\0\1\47\54\0\1\47"+
    "\2\0\1\51\2\50\51\0\3\3\2\0\2\3\11\0"+
    "\11\3\1\52\1\3\1\53\7\3\6\0\2\3\4\0"+
    "\12\54\1\55\1\56\2\54\1\56\41\54\16\0\1\11"+
    "\41\0\12\57\1\60\2\57\2\61\41\57\17\0\1\62"+
    "\1\63\40\0\3\3\2\0\2\3\11\0\1\3\1\64"+
    "\4\3\1\65\14\3\6\0\2\3\5\0\3\3\2\0"+
    "\1\3\1\66\11\0\3\3\1\67\17\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\16\3\1\70\4\3"+
    "\6\0\2\3\5\0\3\3\2\0\1\3\1\71\11\0"+
    "\1\72\22\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\11\3\1\73\11\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\74\22\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\3\3\1\75\17\3\6\0"+
    "\2\3\5\0\3\3\2\0\1\3\1\76\11\0\1\77"+
    "\22\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\1\100\22\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\1\101\2\3\1\102\17\3\6\0\2\3\5\0"+
    "\3\3\2\0\1\3\1\103\11\0\6\3\1\104\14\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\1\105"+
    "\4\3\1\106\10\3\1\107\4\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\1\110\2\3\1\111\17\3"+
    "\6\0\2\3\5\0\3\3\2\0\1\3\1\112\11\0"+
    "\5\3\1\113\15\3\6\0\2\3\61\0\1\114\3\0"+
    "\3\3\2\0\2\3\11\0\23\3\6\0\1\3\1\115"+
    "\10\0\1\114\50\0\1\116\1\45\56\0\1\116\4\0"+
    "\1\47\3\0\2\50\52\0\1\117\1\0\1\117\3\0"+
    "\1\117\50\0\3\3\2\0\2\3\11\0\6\3\1\120"+
    "\6\3\1\121\5\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\12\3\1\122\4\3\1\123\3\3\6\0"+
    "\2\3\4\0\16\54\1\56\41\54\12\0\1\124\2\0"+
    "\2\61\41\0\16\57\1\61\41\57\14\62\1\125\1\62"+
    "\1\126\41\62\20\127\1\130\37\127\1\0\3\3\2\0"+
    "\2\3\11\0\2\3\1\131\20\3\6\0\2\3\5\0"+
    "\3\3\2\0\1\3\1\132\11\0\23\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\5\3\1\133\15\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\2\3"+
    "\1\134\20\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\6\3\1\135\14\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\136\22\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\5\3\1\137\15\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\5\3\1\140"+
    "\1\141\14\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\11\3\1\142\11\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\22\3\1\143\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\4\3\1\144\1\3\1\145"+
    "\14\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\4\3\1\146\14\3\1\147\1\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\3\3\1\150\17\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\4\3\1\151"+
    "\6\3\1\152\7\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\13\3\1\153\7\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\11\3\1\154\11\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\4\3\1\155"+
    "\16\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\1\3\1\156\10\3\1\157\10\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\7\3\1\160\13\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\11\3\1\161"+
    "\11\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\4\3\1\162\6\3\1\163\7\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\6\3\1\164\14\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\10\3\1\165"+
    "\12\3\6\0\2\3\6\0\1\117\56\0\3\3\2\0"+
    "\2\3\11\0\1\166\22\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\16\3\1\167\4\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\3\3\1\170\1\171"+
    "\16\3\6\0\2\3\5\0\3\3\2\0\1\3\1\172"+
    "\11\0\23\3\6\0\2\3\22\0\1\61\57\0\1\126"+
    "\41\0\20\127\1\173\37\127\17\0\1\126\1\130\40\0"+
    "\3\3\2\0\2\3\11\0\3\3\1\174\17\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\1\175\22\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\5\3"+
    "\1\176\15\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\4\3\1\177\16\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\3\1\200\21\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\21\3\1\201\1\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\12\3"+
    "\1\202\10\3\6\0\2\3\5\0\3\3\2\0\1\3"+
    "\1\203\11\0\23\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\16\3\1\204\4\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\22\3\1\205\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\3\3\1\206\17\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\5\3"+
    "\1\207\15\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\1\210\22\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\3\3\1\211\17\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\1\212\22\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\5\3\1\213\15\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\13\3"+
    "\1\214\7\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\1\215\22\3\6\0\2\3\5\0\3\3\2\0"+
    "\1\3\1\216\11\0\1\217\12\3\1\220\1\221\2\3"+
    "\1\222\3\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\12\3\1\223\10\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\224\22\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\13\3\1\225\7\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\3\3\1\226"+
    "\17\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\1\227\22\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\1\3\1\230\21\3\6\0\2\3\5\0\3\3"+
    "\2\0\1\3\1\231\11\0\23\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\4\3\1\232\16\3\6\0"+
    "\2\3\4\0\17\127\1\126\1\173\37\127\1\0\3\3"+
    "\2\0\2\3\11\0\4\3\1\233\16\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\12\3\1\234\10\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\3\3"+
    "\1\235\17\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\5\3\1\236\15\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\4\3\1\237\1\240\15\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\1\3\1\241"+
    "\21\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\1\242\22\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\4\3\1\243\16\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\3\3\1\244\17\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\12\3\1\245\10\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\3\3"+
    "\1\246\17\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\11\3\1\247\11\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\3\3\1\250\17\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\11\3\1\251\1\3"+
    "\1\252\7\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\1\3\1\253\21\3\6\0\2\3\5\0\3\3"+
    "\2\0\1\3\1\254\11\0\23\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\16\3\1\255\4\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\1\256\22\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\1\257"+
    "\22\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\3\3\1\260\17\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\11\3\1\261\11\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\20\3\1\262\2\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\10\3\1\263"+
    "\12\3\6\0\2\3\5\0\3\3\2\0\1\3\1\264"+
    "\11\0\23\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\5\3\1\265\15\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\3\3\1\200\17\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\12\3\1\266\10\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\3\3"+
    "\1\267\17\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\4\3\1\270\16\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\4\3\1\234\16\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\3\3\1\271\17\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\22\3"+
    "\1\272\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\6\3\1\273\14\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\2\3\1\200\20\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\15\3\1\274\5\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\12\3\1\275"+
    "\10\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\2\3\1\276\20\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\11\3\1\277\11\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\4\3\1\300\16\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\3\3\1\301"+
    "\17\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\6\3\1\302\14\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\1\303\22\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\304\22\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\6\3\1\305\14\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\1\306\22\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\3\3"+
    "\1\307\17\3\6\0\2\3\5\0\3\3\2\0\1\3"+
    "\1\310\11\0\23\3\6\0\2\3\5\0\3\3\2\0"+
    "\1\3\1\311\11\0\23\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\16\3\1\312\4\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\3\3\1\313\17\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\3\3"+
    "\1\314\17\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\12\3\1\315\10\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\316\22\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\3\3\1\317\17\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\1\3\1\320"+
    "\21\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\7\3\1\321\13\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\13\3\1\322\7\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\7\3\1\323\13\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\5\3\1\324"+
    "\15\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\4\3\1\200\16\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\1\325\22\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\3\1\326\21\3\6\0\2\3"+
    "\5\0\3\3\2\0\2\3\11\0\4\3\1\327\16\3"+
    "\6\0\2\3\5\0\3\3\2\0\2\3\11\0\1\330"+
    "\22\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\3\3\1\331\17\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\3\3\1\332\17\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\17\3\1\333\3\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\4\3\1\214"+
    "\16\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\11\3\1\334\11\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\20\3\1\335\2\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\5\3\1\336\15\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\3\3\1\337"+
    "\17\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\1\340\22\3\6\0\2\3\5\0\3\3\2\0\2\3"+
    "\11\0\6\3\1\341\14\3\6\0\2\3\5\0\3\3"+
    "\2\0\2\3\11\0\1\342\22\3\6\0\2\3\5\0"+
    "\3\3\2\0\2\3\11\0\6\3\1\343\14\3\6\0"+
    "\2\3\5\0\3\3\2\0\2\3\11\0\3\3\1\344"+
    "\17\3\6\0\2\3\5\0\3\3\2\0\2\3\11\0"+
    "\7\3\1\345\13\3\6\0\2\3\5\0\3\3\2\0"+
    "\2\3\11\0\3\3\1\346\17\3\6\0\2\3\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8496];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\4\1\1\11\16\1\4\11"+
    "\1\1\1\11\2\1\1\11\3\1\1\11\2\1\2\0"+
    "\1\11\2\0\1\11\1\1\1\0\30\1\1\11\1\1"+
    "\1\11\5\1\1\0\1\1\1\11\2\0\42\1\1\0"+
    "\153\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public PortugolFlex() {
        super();
    }

    Symbol newSym(int tokenId) {
        return new Symbol(tokenId , yyline, yycolumn);
    }

    Symbol newSym(int tokenId, Object value) {
        return new Symbol(tokenId , yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PortugolFlex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PortugolFlex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return newSym(sym.error,yytext());
          }
        case 62: break;
        case 2: 
          { return newSym(sym.ID,yytext());
          }
        case 63: break;
        case 3: 
          { return newSym(sym.NUMERO_INT, yytext());
          }
        case 64: break;
        case 4: 
          { return newSym(sym.OPERADOR,yytext());
          }
        case 65: break;
        case 5: 
          { return newSym(sym.NUMERO_FLOAT, yytext());
          }
        case 66: break;
        case 6: 
          { return newSym(sym.E,yytext());
          }
        case 67: break;
        case 7: 
          { return newSym(sym.OPERADOR_SOMA,yytext());
          }
        case 68: break;
        case 8: 
          { /* IGNORE */
          }
        case 69: break;
        case 9: 
          { return newSym(sym.ABRIR_COLCHETE,yytext());
          }
        case 70: break;
        case 10: 
          { return newSym(sym.FECHAR_COLCHETE,yytext());
          }
        case 71: break;
        case 11: 
          { return newSym(sym.ABRIR_PARENTESE,yytext());
          }
        case 72: break;
        case 12: 
          { return newSym(sym.FECHAR_PARENTESE,yytext());
          }
        case 73: break;
        case 13: 
          { return newSym(sym.ADD_ATTR_VAR,yytext());
          }
        case 74: break;
        case 14: 
          { return newSym(sym.SEPARADOR,yytext());
          }
        case 75: break;
        case 15: 
          { return newSym(sym.CONDICIONAL_NUMERICA,yytext());
          }
        case 76: break;
        case 16: 
          { return newSym(sym.CONDICIONAL_COMPARATIVA,yytext());
          }
        case 77: break;
        case 17: 
          { return newSym(sym.DOIS_PONTOS,yytext());
          }
        case 78: break;
        case 18: 
          { return newSym(sym.STRING, yytext());
          }
        case 79: break;
        case 19: 
          { return newSym(sym.CHAR, yytext());
          }
        case 80: break;
        case 20: 
          { /* IGNORAR COMENTARIOS */
          }
        case 81: break;
        case 21: 
          { return newSym(sym.OU,yytext());
          }
        case 82: break;
        case 22: 
          { return newSym(sym.SE,yytext());
          }
        case 83: break;
        case 23: 
          { return newSym(sym.DE,yytext());
          }
        case 84: break;
        case 24: 
          { return newSym(sym.ATRIBUIR,yytext());
          }
        case 85: break;
        case 25: 
          { return newSym(sym.PI,yytext());
          }
        case 86: break;
        case 26: 
          { return newSym(sym.ATE,yytext());
          }
        case 87: break;
        case 27: 
          { return newSym(sym.TANGENTE,yytext());
          }
        case 88: break;
        case 28: 
          { return newSym(sym.VAR,yytext());
          }
        case 89: break;
        case 29: 
          { return newSym(sym.NAO,yytext());
          }
        case 90: break;
        case 30: 
          { return newSym(sym.COSSENO,yytext());
          }
        case 91: break;
        case 31: 
          { return newSym(sym.SENO,yytext());
          }
        case 92: break;
        case 32: 
          { return newSym(sym.POTENCIA,yytext());
          }
        case 93: break;
        case 33: 
          { return newSym(sym.LEIA,yytext());
          }
        case 94: break;
        case 34: 
          { return newSym(sym.TIPO_VARIAVEL,yytext());
          }
        case 95: break;
        case 35: 
          { return newSym(sym.RAIZ,yytext());
          }
        case 96: break;
        case 36: 
          { return newSym(sym.CASO,yytext());
          }
        case 97: break;
        case 37: 
          { return newSym(sym.FACA,yytext());
          }
        case 98: break;
        case 38: 
          { return newSym(sym.PARA,yytext());
          }
        case 99: break;
        case 39: 
          { return newSym(sym.ENTAO,yytext());
          }
        case 100: break;
        case 40: 
          { return newSym(sym.TIPO_VARIAVEL_VETOR,yytext());
          }
        case 101: break;
        case 41: 
          { return newSym(sym.VOID,yytext());
          }
        case 102: break;
        case 42: 
          { return newSym(sym.SENAO,yytext());
          }
        case 103: break;
        case 43: 
          { return newSym(sym.VALOR_LOGICO,yytext());
          }
        case 104: break;
        case 44: 
          { return newSym(sym.FIMSE,yytext());
          }
        case 105: break;
        case 45: 
          { return newSym(sym.PASSO,yytext());
          }
        case 106: break;
        case 46: 
          { return newSym(sym.ESPERAR,yytext());
          }
        case 107: break;
        case 47: 
          { return newSym(sym.INICIO,yytext());
          }
        case 108: break;
        case 48: 
          { return newSym(sym.MODULO,yytext());
          }
        case 109: break;
        case 49: 
          { return newSym(sym.FUNCAO,yytext());
          }
        case 110: break;
        case 50: 
          { return newSym(sym.ESCOLHA,yytext());
          }
        case 111: break;
        case 51: 
          { return newSym(sym.ESCREVA,yytext());
          }
        case 112: break;
        case 52: 
          { return newSym(sym.FIMPARA,yytext());
          }
        case 113: break;
        case 53: 
          { return newSym(sym.ENQUANTO,yytext());
          }
        case 114: break;
        case 54: 
          { return newSym(sym.ESCREVAL,yytext());
          }
        case 115: break;
        case 55: 
          { return newSym(sym.ALGORITMO,yytext());
          }
        case 116: break;
        case 56: 
          { return newSym(sym.OUTROCASO,yytext());
          }
        case 117: break;
        case 57: 
          { return newSym(sym.FIMFUNCAO,yytext());
          }
        case 118: break;
        case 58: 
          { return newSym(sym.INTERROMPA,yytext());
          }
        case 119: break;
        case 59: 
          { return newSym(sym.FIMESCOLHA,yytext());
          }
        case 120: break;
        case 60: 
          { return newSym(sym.FIMENQUANTO,yytext());
          }
        case 121: break;
        case 61: 
          { return newSym(sym.FIMALGORITMO,yytext());
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return newSym(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
